---
import "../styles/global.css";

import { ViewTransitions } from "astro:transitions";

import { routes } from '../lib/routes.js';

import Header from "../components/appHeader.vue";
import Footer from "../components/appFooter.vue";
import CookieConsent from "../components/CookieConsent.vue";
import CircleSmall from "../components/circleSmall.vue";
import { getPageById, getProductById } from '../lib/api.js';

const LOCALES = ['en','es'];
const { lang, slug, page, getById, colorText = "#eee9e3", bgHeader = "bg-transparent" } = Astro.props;

// determina el slug actual, dinámico o estático
const currentSlug = page?.slug ?? slug;

// construye el switch
const switchUrls = page && getById
  ? await Promise.all(
      LOCALES.map(async (code) => {
        if (code === lang) return { code, url: `/${code}/${page.slug}` };
        const transId = page.translations?.[code];
        if (!transId) return { code, url: `/${code}/` };
        const { slug: translated } = await getById(transId);
        return { code, url: `/${code}/${translated}` };
      })
    )
  : LOCALES.map((code) => {
      const route = routes.find(r => r.slug[lang] === currentSlug);
      const target = route ? route.slug[code] : '';
      return { code, url: `/${code}/${target}` };
    });

---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Novameat</title>
    <meta name="description" content="Novameat designs and manufactures high quality plant-based sustainable meat alternatives to contribute to the regeneration of our planet's biodiversity and to the improvement of human and animal wellbeing."/>
    <meta property="og:title" content="NOVAMEAT | Plant-Based Meat"/>
    <meta property="og:description" content="Novameat designs and manufactures high quality plant-based sustainable meat alternatives to contribute to the regeneration of our planet's biodiversity and to the improvement of human and animal wellbeing."/>
    <meta property="og:url" content="https://www.novameat.com"/>
    <meta property="og:site_name" content="NOVAMEAT TECH"/>
    <meta property="og:type" content="website"/>
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Montagu+Slab:opsz,wght@16..144,100..700&display=swap"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <ViewTransitions />
  </head>

  <body class="bg-white">
    <Header transition:persist lang={lang} switchUrls={switchUrls} routes={routes} colorText={colorText} bgHeader={bgHeader} client:load />
    
    <div
      class="loading z-50 bg-black w-full h-[100vh] absolute top-0 left-0 flex justify-center items-center"
    >
      <CircleSmall class="w-1/6" color={colorText} client:load />
    </div>

    <div class="slot-container opacity-0">
      <slot />
    </div>
    <div class="slot-container opacity-0">
      <Footer lang={lang} switchUrls={switchUrls} routes={routes} />
    </div>

    <script>
      import { gsap } from "gsap";
      import Lenis from "lenis";
      import { ScrollTrigger } from "gsap/ScrollTrigger";
      import { initProductAnimations } from "../scripts/productAnimations.js";
      import { initTabsAnimation } from "../scripts/tabsAnimation.js";
      import { cardEffect } from "../scripts/cardEffect.js";
      import { orderButtonAnimation } from "../scripts/orderButton.js";
      import { headerProductSelector } from "../scripts/headerProductSelector.js";
      import { copiesAnimation } from "../scripts/copiesAnimation.js";
      import { reload } from "../scripts/reload";
      import { menuTransparent } from "../scripts/menuTransparent";

      gsap.registerPlugin(ScrollTrigger);

      function lenis() {
        const lenis = new Lenis({
          duration: 1.2,
          easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
        });

        // Scroll para anchor points
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener("click", (e) => {
            e.preventDefault();
            const targetId = anchor.getAttribute("href");
            const targetElement = document.querySelector(targetId);
            if (targetElement) {
              ScrollTrigger.getAll().forEach((trigger) => {
                if (trigger.animation) {
                  trigger.animation.progress(1);
                }
              });

              lenis.scrollTo(targetElement);
            }
          });
        });

        lenis.on("scroll", ScrollTrigger.update);
        lenis.scrollTo(0, { immediate: true });
        ScrollTrigger.refresh();
        ScrollTrigger.defaults({
          //   scroller: document,
        });
        lenis.resize();
        function raf(time: any) {
          lenis.raf(time);
          requestAnimationFrame(raf);
        }
        requestAnimationFrame(raf);
      }

      function outPage() {
        const page = document.querySelectorAll(".slot-container");
        gsap.to(page, {
          autoAlpha: 0,
          duration: 0.2,
        });
      }

      function inPage() {
        const page = document.querySelectorAll(".slot-container");
        const loading = document.querySelector(".loading");
        gsap.fromTo(
          page,
          {
            autoAlpha: 0,
          },
          {
            autoAlpha: 1,
            duration: 0.3,
          }
        );
        gsap.fromTo(
          loading,
          {
            autoAlpha: 1,
          },
          {
            delay: 0.6,
            autoAlpha: 0,
            duration: 0.3,
          }
        );
      }

      document.addEventListener("astro:before-preparation", () => {
        console.log("before prep");
        outPage();
      });

      document.addEventListener("astro:before-swap", () => {
        console.log("before swap");
      });

      // En la navegación interna
      document.addEventListener("astro:after-swap", () => {
        console.log("after swap");

        inPage();
        // mata triggers previos, por si acaso
        ScrollTrigger.getAll().forEach((t) => t.kill());
        lenis();
        setTimeout(() => {
          ScrollTrigger.refresh(true);
          console.log("refreshed");
        }, 100);
        initProductAnimations();
        initTabsAnimation();
        cardEffect();
        orderButtonAnimation();
        setTimeout(() => {
          headerProductSelector();
          menuTransparent();
        }, 500);
        copiesAnimation();

      });

      // En la carga inicial
      document.addEventListener("astro:page-load", () => {
        console.log("page loaded");
        inPage();
        // mata triggers previos, por si acaso
        ScrollTrigger.getAll().forEach((t) => t.kill());
        // refresca el ScrollTrigger tras crear
        lenis();
        setTimeout(() => {
          ScrollTrigger.refresh(true);
          console.log("refreshed");
        }, 100);
        initProductAnimations();
        initTabsAnimation();
        cardEffect();
        orderButtonAnimation();
        setTimeout(() => {
          headerProductSelector();
          menuTransparent();
        }, 500);
        copiesAnimation();
        reload();
        
      });
    </script>
    <CookieConsent client:load />
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    /* height: 100%; */
  }
</style>
